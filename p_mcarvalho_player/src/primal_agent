#!/usr/bin/env python3
import copy
import math
import random
import cv2
import json
import os
from cv_bridge import CvBridge
import rospy
import tf2_ros
from sensor_msgs.msg import Image
from geometry_msgs.msg import Twist, PoseStamped
from sensor_msgs.msg import LaserScan
import tf2_geometry_msgs  # **Do not use geometry_msgs. Use this instead for PoseStamped
from datetime import datetime
import numpy as np
import subprocess
import message_filters

MAX_LIN_VEL = 2.22
MAX_ANG_VEL = 2.84

LIN_VEL_STEP_SIZE = 0.05
ANG_VEL_STEP_SIZE = 0.2

def bash(cmd, blocking=True, verbose=False):

    if verbose:
        print("Executing command: " + cmd)
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if blocking:
        for line in p.stdout.readlines():
            print(line)
            p.wait()


class Driver:

    def __init__(self):

        folder = os.getcwd() + '/src/p_mcarvalho_player/src/'
        self.teleop_timestamp = None
        self.name = rospy.get_name()
        self.name = self.name.strip('/') # remove initial /
        color = self.name.split('_', 1)[0]

        if 'red' in color:
            self.msg_id = 10
            self.ally_color = 'red'
            self.hunter_color = 'blue'
            self.prey_color = 'green'
            self.ally_color_bgr = (0,0,255)
            self.hunter_color_bgr = (255,0,0)
            self.prey_color_bgr = (0,255,0)
        elif 'green' in color:
            self.msg_id = 20
            self.ally_color = 'green'
            self.hunter_color = 'red'
            self.prey_color = 'blue'
            self.ally_color_bgr = (0,255,0)
            self.hunter_color_bgr = (0,0,255)
            self.prey_color_bgr = (255,0,0)
        elif 'blue' in color:
            self.msg_id = 30
            self.ally_color = 'blue'
            self.hunter_color = 'green'
            self.prey_color = 'red'
            self.ally_color_bgr = (255,0,0)
            self.hunter_color_bgr = (0,255,0)
            self.prey_color_bgr = (0,0,255)
        else:
            print('Color ' + color + ' not recognized, shutting down')
            quit()

        self.allies = rospy.get_param(self.ally_color + '_players')
        self.hunters = rospy.get_param(self.hunter_color + '_players')
        self.preys = rospy.get_param(self.prey_color + '_players')

        print('My player name is ' + self.name + ', I am team ' + self.ally_color + ' I am hunting ' + str(self.preys) + ' and fleeing from ' + str(self.hunters))

        self.ally_limits = self.convert_to_json(folder + self.ally_color + '_limits.json')
        self.hunter_limits = self.convert_to_json(folder + self.hunter_color + '_limits.json')
        self.prey_limits = self.convert_to_json(folder + self.prey_color + '_limits.json')

        self.front_camera_image = None
        self.back_camera_image = None

        self.bridge = CvBridge()

        #self.front_camera_subscriber = rospy.Subscriber('/' + self.name + '/front_camera/rgb/image_raw', Image, self.frontCameraReceivedCallback)
        #self.back_camera_subscriber = rospy.Subscriber('/' + self.name + '/back_camera/rgb/image_raw', Image, self.backCameraReceivedCallback)
        front_camera_subscriber = message_filters.Subscriber('/' + self.name + '/front_camera/rgb/image_raw', Image)
        back_camera_subscriber = message_filters.Subscriber('/' + self.name + '/back_camera/rgb/image_raw', Image)
        ts = message_filters.TimeSynchronizer([front_camera_subscriber, back_camera_subscriber], 2)
        ts.registerCallback(self.analyzeImages)

        self.state = 'wandering'

        update_marker_cmd = "gz marker -m 'action: ADD_MODIFY, type: TEXT, id: " + str(self.msg_id) + \
          ", scale: {x:0.3, y:0.3, z:0.3}, text: \"" + self.name + "|" + self.state + "\", parent: \"" + self.name + \
          "::base_footprint\", pose: {position: {x:0, y:0, z:0.5}, orientation: {x:0, y:0, z:0, w:1}}'"

        bash(cmd=update_marker_cmd, verbose=True)

        self.target_linear_vel = 0.0
        self.target_angular_vel = 0.0
        self.control_linear_vel = 0.0
        self.control_angular_vel = 0.0

        self.publisher_command = rospy.Publisher('/' + self.name + '/cmd_vel', Twist, queue_size=1)

        self.tf_buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tf_buffer)

        self.goal = PoseStamped()
        self.goal_subscriber = rospy.Subscriber('/move_base_simple/goal', PoseStamped, self.goalReceivedCallback)
        
        self.scan_range_max = 4
        self.points = []
        self.scan_subscriber = rospy.Subscriber('/' + self.name + '/scan', LaserScan, self.scanReceivedCallBack)
        
        self.teleop_subscriber = rospy.Subscriber('/' + self.name + '/teleop_vel', Twist, self.teleopReceivedCallBack)
        
        #self.timer = rospy.Timer(rospy.Duration(0.1), lambda x: self.analyzeImages() or self.drive())
        self.timer = rospy.Timer(rospy.Duration(0.1), lambda x: self.drive())

    def convert_to_json(self, filename):
        with open(filename) as f_in:
            return json.load(f_in)
    
    def goalReceivedCallback(self, msg):
        # verify is goal is on odom frame
        target_frame = self.name + '/odom'
        if msg.header.frame_id.split("/")[0] == self.name:
            try:
                self.goal = self.tf_buffer.transform(msg, target_frame, rospy.Duration(1))
                self.state = "goal"
                rospy.logwarn('Setting new goal')
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
                self.state = "wandering"
                rospy.logerr('Could not transform goal from ' + msg.header.frame_id + ' to ' + target_frame + '. Will ignore this goal.')

    def teleopReceivedCallBack(self, msg):
        self.teleop_timestamp = datetime.timestamp(datetime.now())
        self.state = "teleop"
        self.publisher_command.publish(msg)

    ## CODE ABOUT CAMERAS ##
    def backCameraReceivedCallback(self, msg):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        except CvBridgeError as e:
            print(e)
            return

        self.back_camera_image = cv_image.copy()
    
    def frontCameraReceivedCallback(self, msg):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        except CvBridgeError as e:
            print(e)
            return

        self.front_camera_image = cv_image.copy()
        
    #def analyzeImages(self):
    def analyzeImages(self, front_camera_image, back_camera_image):
        #cv2.imwrite('test_multiple.jpeg', self.front_camera_image)
        #print('hello')
        self.allies = []
        self.preys = []
        self.hunters = []
        
        #if self.front_camera_image is None or self.back_camera_image is None:
            #return

        try:
            cv_image_front = self.bridge.imgmsg_to_cv2(front_camera_image, "bgr8")
            cv_image_back = self.bridge.imgmsg_to_cv2(back_camera_image, "bgr8")
        except CvBridgeError as e:
            print(e)
            return
        
        #width = self.front_camera_image.shape[1]
        width = cv_image_front.shape[1]
   
        ally_mins = np.array([self.ally_limits['limits']['b']['min'], self.ally_limits['limits']['g']['min'], self.ally_limits['limits']['r']['min']])
        ally_maxs = np.array([self.ally_limits['limits']['b']['max'], self.ally_limits['limits']['g']['max'], self.ally_limits['limits']['r']['max']])
        hunter_mins = np.array([self.hunter_limits['limits']['b']['min'], self.hunter_limits['limits']['g']['min'], self.hunter_limits['limits']['r']['min']])
        hunter_maxs = np.array([self.hunter_limits['limits']['b']['max'], self.hunter_limits['limits']['g']['max'], self.hunter_limits['limits']['r']['max']])
        prey_mins = np.array([self.prey_limits['limits']['b']['min'], self.prey_limits['limits']['g']['min'], self.prey_limits['limits']['r']['min']])
        prey_maxs = np.array([self.prey_limits['limits']['b']['max'], self.prey_limits['limits']['g']['max'], self.prey_limits['limits']['r']['max']])

        #\----FRONT CAMERA----/
        #ally_mask_front = cv2.inRange(self.front_camera_image, ally_mins, ally_maxs)
        #hunter_mask_front = cv2.inRange(self.front_camera_image, hunter_mins, hunter_maxs)
        #prey_mask_front = cv2.inRange(self.front_camera_image, prey_mins, prey_maxs)

        ally_mask_front = cv2.inRange(cv_image_front, ally_mins, ally_maxs)
        hunter_mask_front = cv2.inRange(cv_image_front, hunter_mins, hunter_maxs)
        prey_mask_front = cv2.inRange(cv_image_front, prey_mins, prey_maxs)

        kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(10,10))

        ally_mask_front = cv2.morphologyEx(ally_mask_front,cv2.MORPH_CLOSE,kernel)
        hunter_mask_front = cv2.morphologyEx(hunter_mask_front,cv2.MORPH_CLOSE,kernel)
        prey_mask_front = cv2.morphologyEx(prey_mask_front,cv2.MORPH_CLOSE,kernel)

        output = cv2.connectedComponentsWithStats(ally_mask_front, 8, cv2.CV_32S)
        (numLabels, labels, stats, centroids) = output

        for i in range(1, numLabels):
            area = stats[i, cv2.CC_STAT_AREA]
            (cX, cY) = centroids[i]
            cX, cY = int(cX), int(cY)
            if area > 300:
                self.allies.append(math.pi/4*(width//2-cX)/(width/2))
                # draw cross on centroid
                #cv2.putText(self.front_camera_image, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.ally_color_bgr, 2, cv2.LINE_8)
                cv2.putText(cv_image_front, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.ally_color_bgr, 2, cv2.LINE_8)

        output = cv2.connectedComponentsWithStats(hunter_mask_front, 8, cv2.CV_32S)
        (numLabels, labels, stats, centroids) = output

        for i in range(1, numLabels):
            area = stats[i, cv2.CC_STAT_AREA]
            (cX, cY) = centroids[i]
            cX, cY = int(cX), int(cY)
            if area > 300:
                self.hunters.append(math.pi/4*(width//2-cX)/(width/2))
                # draw cross on centroid
                #cv2.putText(self.front_camera_image, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.hunter_color_bgr, 2, cv2.LINE_8)
                cv2.putText(cv_image_front, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.hunter_color_bgr, 2, cv2.LINE_8)

        output = cv2.connectedComponentsWithStats(prey_mask_front, 8, cv2.CV_32S)
        (numLabels, labels, stats, centroids) = output

        for i in range(1, numLabels):
            area = stats[i, cv2.CC_STAT_AREA]
            (cX, cY) = centroids[i]
            cX, cY = int(cX), int(cY)
            if area > 300:
                self.preys.append(math.pi/4*(width//2-cX)/(width/2))
                # draw cross on centroid
                #cv2.putText(self.front_camera_image, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.prey_color_bgr, 2, cv2.LINE_8)
                cv2.putText(cv_image_front, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.prey_color_bgr, 2, cv2.LINE_8)


        #\----BACK CAMERA----/
        #ally_mask_back = cv2.inRange(self.back_camera_image, ally_mins, ally_maxs)
        #hunter_mask_back = cv2.inRange(self.back_camera_image, hunter_mins, hunter_maxs)
        #prey_mask_back = cv2.inRange(self.back_camera_image, prey_mins, prey_maxs)

        ally_mask_back = cv2.inRange(cv_image_back, ally_mins, ally_maxs)
        hunter_mask_back = cv2.inRange(cv_image_back, hunter_mins, hunter_maxs)
        prey_mask_back = cv2.inRange(cv_image_back, prey_mins, prey_maxs)

        kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(10,10))

        ally_mask_back = cv2.morphologyEx(ally_mask_back,cv2.MORPH_CLOSE,kernel)
        hunter_mask_back = cv2.morphologyEx(hunter_mask_back,cv2.MORPH_CLOSE,kernel)
        prey_mask_back = cv2.morphologyEx(prey_mask_back,cv2.MORPH_CLOSE,kernel)

        output = cv2.connectedComponentsWithStats(ally_mask_back, 8, cv2.CV_32S)
        (numLabels, labels, stats, centroids) = output

        for i in range(1, numLabels):
            area = stats[i, cv2.CC_STAT_AREA]
            (cX, cY) = centroids[i]
            cX, cY = int(cX), int(cY)
            if area > 300:
                if cX > (width//2):
                    self.allies.append(math.pi/2+math.pi/4*(cX-width/2)/(width/2))
                else:
                    self.allies.append(-math.pi/2+math.pi/4*(cX-width/2)/(width/2))
                # draw cross on centroid
                #cv2.putText(self.back_camera_image, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.ally_color_bgr, 2, cv2.LINE_8)
                cv2.putText(cv_image_back, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.ally_color_bgr, 2, cv2.LINE_8)

        output = cv2.connectedComponentsWithStats(hunter_mask_back, 8, cv2.CV_32S)
        (numLabels, labels, stats, centroids) = output

        for i in range(1, numLabels):
            area = stats[i, cv2.CC_STAT_AREA]
            (cX, cY) = centroids[i]
            cX, cY = int(cX), int(cY)
            if area > 300:
                if cX > (width//2):
                    self.hunters.append(math.pi/2+math.pi/4*(cX-width/2)/(width/2))
                else:
                    self.hunters.append(-math.pi/2+math.pi/4*(cX-width/2)/(width/2))
                # draw cross on centroid
                #cv2.putText(self.back_camera_image, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.hunter_color_bgr, 2, cv2.LINE_8)
                cv2.putText(cv_image_back, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.hunter_color_bgr, 2, cv2.LINE_8)

        output = cv2.connectedComponentsWithStats(prey_mask_back, 8, cv2.CV_32S)
        (numLabels, labels, stats, centroids) = output

        for i in range(1, numLabels):
            area = stats[i, cv2.CC_STAT_AREA]
            (cX, cY) = centroids[i]
            cX, cY = int(cX), int(cY)
            if area > 300:
                if cX > (width//2):
                    self.preys.append(math.pi/2+math.pi/4*(cX-width/2)/(width/2))
                else:
                    self.preys.append(-math.pi/2+math.pi/4*(cX-width/2)/(width/2))
                # draw cross on centroid
                #cv2.putText(self.back_camera_image, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.prey_color_bgr, 2, cv2.LINE_8)
                cv2.putText(cv_image_back, '+', (cX, cY), cv2.FONT_ITALIC, 1, self.prey_color_bgr, 2, cv2.LINE_8)

        #cv2.imshow('Front Camera', self.front_camera_image)
        cv2.imshow('Front Camera', cv_image_front)
        cv2.imshow('Front Camera Ally Detector', ally_mask_front)
        cv2.imshow('Front Camera Hunter Detector', hunter_mask_front)
        cv2.imshow('Front Camera Prey Detector', prey_mask_front)

        #cv2.imshow('Back Camera', self.back_camera_image)
        cv2.imshow('Back Camera', cv_image_back)
        cv2.imshow('Back Camera Ally Detector', ally_mask_back)
        cv2.imshow('Back Camera Hunter Detector', hunter_mask_back)
        cv2.imshow('Back Camera Prey Detector', prey_mask_back)

        cv2.waitKey(3)
    
    ## CODE ABOUT LIDAR ##
    def scanReceivedCallBack(self, scan): # intervals of 0.2s
        self.scan_range_max = scan.range_max
        
        self.points = []
        for idx, r in enumerate(scan.ranges):
            if r >= scan.range_min and r <= scan.range_max:
                theta = scan.angle_min + scan.angle_increment * idx
                self.points.append([r, theta])
    
    def getMinimumDistance(self, angle_min, angle_max):
        dist=self.scan_range_max
        if len(self.points)!=0:
            for p in self.points:
                if p[1] >= angle_min and p[1]<= angle_max and p[0]<dist:
                    dist = p[0]
                
        return dist
    
    ## CODE ABOUT DRIVING ##
    def makeSimpleProfile(self, output, input, slop):
        if input > output:
            output = min( input, output + slop )
        elif input < output:
            output = max( input, output - slop )
        else:
            output = input

        return output
    
    # timer triggered callback to decide actions to take
    def drive(self):
        if self.state == "teleop" and datetime.timestamp(datetime.now()) - self.teleop_timestamp<1:
            return
        
        if self.state != "goal":
            if len(self.hunters)>0:
                self.state = "fleeing"
            elif len(self.preys)>0:
                self.state = "hunting"
            else:
                self.state = "wandering"
                
        bash(cmd='gz marker -i ' + str(self.msg_id) + ' -d', verbose=True)

        update_marker_cmd = "gz marker -m 'action: ADD_MODIFY, type: TEXT, id: " + str(self.msg_id) + \
          ", scale: {x:0.3, y:0.3, z:0.3}, text: \"" + self.name + "|" + self.state + "\", parent: \"" + self.name + \
          "::base_footprint\", pose: {position: {x:0, y:0, z:0.5}, orientation: {x:0, y:0, z:0, w:1}}'"

        bash(cmd=update_marker_cmd, verbose=True)
        
        if self.state == "wandering" or self.state == "fleeing":
            center_dist = min(self.getMinimumDistance(0,math.pi/24), self.getMinimumDistance(47/24*math.pi,2*math.pi))
            left_dist = self.getMinimumDistance(math.pi/6, math.pi/2)
            right_dist = self.getMinimumDistance(3/2*math.pi,11/6*math.pi)
            
            if center_dist>2.5 and left_dist>0.3 and right_dist>0.3:
                self.target_angular_vel = 0
                
                self.control_linear_vel = self.makeSimpleProfile(self.control_linear_vel, 0.7, (LIN_VEL_STEP_SIZE/2.0))
                self.control_angular_vel = self.makeSimpleProfile(self.control_angular_vel, 0, (ANG_VEL_STEP_SIZE/2.0))

            else:
                self.control_linear_vel = self.makeSimpleProfile(self.control_linear_vel, 0.2, (LIN_VEL_STEP_SIZE/2.0))
                if left_dist<2 or right_dist<2:
                    if left_dist>right_dist:
                        self.target_angular_vel=0.5
                    else:
                        self.target_angular_vel=-0.5
                
                elif not self.target_angular_vel:
                    self.target_angular_vel = 0.5 if random.random()>0.5 else -0.5
                    
                self.control_angular_vel = self.makeSimpleProfile(self.control_angular_vel, self.target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))

            twist = Twist()
            twist.linear.x = self.control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = self.control_angular_vel
            self.publisher_command.publish(twist)
        
        elif self.state == "hunting":
            print("hunting")
            self.control_linear_vel = self.makeSimpleProfile(self.control_linear_vel, 0.7 if abs(self.preys[0]) < math.pi/2 else 0, (LIN_VEL_STEP_SIZE/2.0))
            self.control_angular_vel = self.makeSimpleProfile(self.control_angular_vel, self.preys[0], (ANG_VEL_STEP_SIZE/2.0))
            twist = Twist()
            twist.linear.x = self.control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = self.control_angular_vel
            self.publisher_command.publish(twist)
        
        elif self.state=="goal":
            goal_copy = copy.deepcopy(self.goal)  # make sure we don't change the stamp field of the goal
            goal_copy.header.stamp = rospy.Time.now()

            goal_in_base_link = self.tf_buffer.transform(goal_copy, self.name + '/base_footprint', rospy.Duration(1))

            x = goal_in_base_link.pose.position.x
            y = goal_in_base_link.pose.position.y
            angle = math.atan2(y,x)
            
            center_dist = min(self.getMinimumDistance(0,math.pi/24), self.getMinimumDistance(47/24*math.pi,2*math.pi))
            
            if x**2 + y**2 < 1 or center_dist<1.5:
                self.state = "wandering"

            self.control_linear_vel = self.makeSimpleProfile(self.control_linear_vel, 0.7 if angle < math.pi/2 or angle > 3*math.pi/2 else 0, (LIN_VEL_STEP_SIZE/2.0))
            self.control_angular_vel = self.makeSimpleProfile(self.control_angular_vel, angle if angle < math.pi else angle-math.pi*2, (ANG_VEL_STEP_SIZE/2.0))
            twist = Twist()
            twist.linear.x = self.control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = self.control_angular_vel
            self.publisher_command.publish(twist)


def main():
    # ---------------------------------------------------
    # INITIALIZATION
    # ---------------------------------------------------
    default_node_name = 'p_mcarvalho_driver'
    rospy.init_node(default_node_name, anonymous=False)

    driver = Driver()
    rospy.spin()


if __name__ == '__main__':
    main()
